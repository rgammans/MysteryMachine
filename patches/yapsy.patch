diff -r b70ea7217e78 yapsydir/trunk/test/plugins/configplugin.yapsy-filter-plugin
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/yapsydir/trunk/test/plugins/configplugin.yapsy-filter-plugin	Wed Oct 21 23:51:02 2009 +0100
@@ -0,0 +1,9 @@
+[Core]
+Name = Config Plugin
+Module = ConfigPlugin
+
+[Documentation]
+Author = Thibauld Nion
+Version = 0.1
+Website = http://mathbench.sourceforge.net
+Description = A simple plugin with configuration handling
diff -r b70ea7217e78 yapsydir/trunk/test/plugins/simpleplugin.yapsy-filter-plugin
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/yapsydir/trunk/test/plugins/simpleplugin.yapsy-filter-plugin	Wed Oct 21 23:51:02 2009 +0100
@@ -0,0 +1,9 @@
+[Core]
+Name = Simple Plugin
+Module = SimplePlugin
+
+[Documentation]
+Author = Thibauld Nion
+Version = 0.1
+Website = http://mathbench.sourceforge.net
+Description = A simple plugin usefull for basic testing
diff -r b70ea7217e78 yapsydir/trunk/test/test_All.py
--- a/yapsydir/trunk/test/test_All.py	Wed Apr 09 12:05:36 2008 +0100
+++ b/yapsydir/trunk/test/test_All.py	Wed Oct 21 23:51:02 2009 +0100
@@ -18,6 +18,7 @@
 import test_ConfigPlugin
 import test_VersionedPlugin
 import test_AutoInstallPlugin
+import test_FilterPlugin
 
 
 # add them to a common test suite
@@ -28,5 +29,6 @@
 		test_ConfigPlugin.suite,
 		test_VersionedPlugin.suite,
 		test_AutoInstallPlugin.suite,
+		test_FilterPlugin.suite,
 		])
 
diff -r b70ea7217e78 yapsydir/trunk/test/test_FilterPlugin.py
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/yapsydir/trunk/test/test_FilterPlugin.py	Wed Oct 21 23:51:02 2009 +0100
@@ -0,0 +1,95 @@
+from test_settings import *
+import unittest
+import os 
+import re
+
+from yapsy.FilteredPluginManager import FilteredPluginManager
+
+
+class testFilter(FilteredPluginManager):
+	"""
+		Test filter class.
+		Refused to load plugins whose Name starts with 'C'.
+	"""
+	_bannednames = re.compile("^C")
+
+	def isPluginOk(self,info):
+		return not self._bannednames.match(info.name)
+
+
+class FilteredTestsCase(unittest.TestCase):
+    """
+    Test the correct loading of a simple plugin as well as basic
+    commands.
+    """
+    
+    def setUp(self):
+        """
+        init
+        """
+        # create the plugin manager
+#        print os.path.join(os.path.dirname(os.path.abspath(__file__)),"plugins")
+        self.filteredPluginManager = testFilter(
+            directories_list=[os.path.join(
+					os.path.dirname(os.path.abspath(__file__)),"plugins")],
+			      plugin_info_ext="yapsy-filter-plugin",
+      	)
+        # load the plugins that may be found
+        self.filteredPluginManager.collectPlugins()
+        # Will be used later
+        self.plugin_info = None
+
+    def plugin_loading_check(self):
+        """
+        Test if the correct plugins have been loaded.
+        """
+        # check nb of categories
+        self.assertEqual(len(self.filteredPluginManager.getCategories()),1)
+        sole_category = self.filteredPluginManager.getCategories()[0]
+        # check the number of plugins
+        self.assertEqual(len(self.filteredPluginManager.getPluginsOfCategory(sole_category)),1)
+        plugins = self.filteredPluginManager.getPluginsOfCategory(sole_category)
+        for plugin_info in plugins:
+		TEST_MESSAGE("plugin info: %s" % plugin_info)
+		self.plugin_info = plugin_info	
+		self.assert_(self.plugin_info)
+		self.assertEqual(self.plugin_info.name,"Simple Plugin")
+		self.assertEqual(sole_category,self.plugin_info.category)
+
+    def testLoaded(self):
+        """
+        Test if the correct plugin has been loaded.
+        """
+        self.plugin_loading_check()
+        
+
+    def testActivationAndDeactivation(self):
+        """
+        Test if the activation procedure works.
+        """
+        self.plugin_loading_check()
+        self.assert_(not self.plugin_info.plugin_object.is_activated)
+        TEST_MESSAGE("plugin object = %s" % self.plugin_info.plugin_object)
+        self.plugin_info.plugin_object.activate()
+        self.assert_(self.plugin_info.plugin_object.is_activated)
+        self.plugin_info.plugin_object.deactivate()
+        self.assert_(not self.plugin_info.plugin_object.is_activated)	
+
+
+    def testRejectedList(self):
+    	"""
+    	Test if the list of rejected plugins is correct.
+    	"""
+        for plugin_info in self.filteredPluginManager.getRejectedPluginInfo():
+            TEST_MESSAGE("plugin info: %s" % plugin_info)
+            self.assertEqual(plugin_info.name,"Config Plugin")
+
+    def testRejectedStable(self):
+        reject1 = list(self.filteredPluginManager.getRejectedPluginInfo())
+        self.filteredPluginManager.collectPlugins()
+        reject2 = list(self.filteredPluginManager.getRejectedPluginInfo())
+        self.assertEqual(len(reject1),len(reject2))
+
+suite = unittest.TestSuite([
+        unittest.TestLoader().loadTestsFromTestCase(FilteredTestsCase),
+        ])
diff -r b70ea7217e78 yapsydir/trunk/yapsy/FilteredPluginManager.py
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/yapsydir/trunk/yapsy/FilteredPluginManager.py	Wed Oct 21 23:51:02 2009 +0100
@@ -0,0 +1,75 @@
+#!/usr/bin/python
+
+"""
+Defines a basic interface for plugin managers which filter the
+available list of plugins before loading.
+
+One use fo this would be to prevent untrusted plugins from entering the system
+"""
+ 
+
+
+from PluginManager import  PluginManagerDecorator
+from IPlugin import IPlugin
+
+
+class FilteredPluginManager(PluginManagerDecorator):
+	"""
+	Base class for decorators which filter the plugins list
+	before they are loaded.
+	"""
+
+	def __init__(self, 
+				 decorated_manager=None,
+				 categories_filter={"Default":IPlugin}, 
+				 directories_list=None, 
+				 plugin_info_ext="yapsy-plugin"):
+		"""
+		"""
+		# Create the base decorator class
+		PluginManagerDecorator.__init__(self,decorated_manager,
+										categories_filter,
+										directories_list,
+										plugin_info_ext)
+		# prepare the mapping of the latest version of each plugin
+		self.rejectedPlugins =  [ ] 
+
+
+
+	def filterPlugins(self):
+		"""
+		This is a helper function to be overridden by subclass to remove
+		the unwanted extensions from the main extension list.
+		"""
+		candidates = self._component._candidates 
+		self._component._candidates = [ ]
+		self.rejectedPlugins        = [ ]
+		for candidate_infofile, candidate_filepath, plugin_info in candidates:
+			if self.isPluginOk( plugin_info):
+				self._component._candidates.append(  [ candidate_infofile, candidate_filepath, plugin_info ])
+			else:
+				self.rejectedPlugins.append( [ candidate_infofile, candidate_filepath, plugin_info ] )
+
+
+	def isPluginOk(self,info):
+		"""
+		Sentinel function to detect if a plugin should be filtered.
+
+		Subclasses should override this function and return false for
+		any plugin which they do not want to be loadabele.
+		"""
+		return True
+
+	def locatePlugins(self):
+		"""
+		locate and filter plugins.
+		"""
+		#Reset Catalogue
+		self.setCategoriesFilter(self._component.categories_interfaces)
+		#Reread and filter.
+		self._component.locatePlugins()
+		self.filterPlugins()
+
+	def getRejectedPluginInfo(self):
+		for dummy1 , dummy2 ,info in self.rejectedPlugins:
+			yield info
